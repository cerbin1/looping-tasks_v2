{"version":3,"sources":["components/Element.js","components/Task.js","components/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["Element","props","className","isClicked","onClick","setElementClicked","index","name","Task","elements","state","setState","allElementsClicked","every","value","style","color","this","links","rel","target","href","link","map","element","i","key","Component","Tasks","tasks","task","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAQeA,EALC,SAACC,GACb,OAAO,yBAAKC,UAAWD,EAAME,UAAY,4BAA8B,2BAC3DC,QAAS,kBAAMH,EAAMI,kBAAkBJ,EAAMK,SAASL,EAAMM,OCiD7DC,E,YAjDX,WAAYP,GAAQ,IAAD,8BACf,4CAAMA,KAIVI,kBAAoB,SAACC,GACjB,IAAIG,EAAW,EAAKC,MAAMD,SAC1BA,EAASH,GAAOH,WAAaM,EAASH,GAAOH,UAC7C,EAAKQ,SAAS,CACVF,SAAUA,KATC,EAanBG,mBAAqB,WACjB,OAAO,EAAKF,MAAMD,SAASI,OAAM,SAAAC,GAAK,OAAIA,EAAMX,cAZhD,EAAKO,MAAQT,EAFE,E,sEAiBT,IAAD,OACL,OACI,6BACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,kCACX,wBAAIa,MAAO,CAACC,MAAOC,KAAKL,qBAAuB,QAAU,QAASK,KAAKP,MAAMH,QAGhE,MAApBU,KAAKP,MAAMQ,MAAgB,KACxB,yBAAKhB,UAAU,OACX,yBAAKA,UAAU,sDACX,uBAAGA,UAAU,aAAaiB,IAAI,sBAAsBC,OAAO,SACxDC,KAAMJ,KAAKP,MAAMQ,MAAMI,MAAOL,KAAKP,MAAMQ,MAAMX,QAI9D,yBAAKL,UAAU,OACX,yBAAKA,UAAU,yCACVe,KAAKP,MAAMD,SAASc,KAAI,SAACC,EAASC,GAC/B,OAAO,kBAAC,EAAD,CAASpB,kBAAmB,EAAKA,kBACxBC,MAAOmB,EACPC,IAAKD,EACLlB,KAAMiB,EAAQjB,KACdJ,UAAWqB,EAAQrB,sB,GAzC5CwB,aCiDJC,E,2MAjDXlB,MAAQ,CACJmB,MACI,CACI,CACItB,KAAM,sBACNW,MAAO,KACPT,SAAU,CACN,CAACF,KAAM,aAAcJ,WAAW,GAChC,CAACI,KAAM,kBAAmBJ,WAAW,GACrC,CAACI,KAAM,6BAA8BJ,WAAW,GAChD,CAACI,KAAM,6BAA8BJ,WAAW,KAGxD,CACII,KAAM,cACNW,MAAO,CAACX,KAAM,gBAAiBe,KAAM,sDACrCb,SAAU,CACN,CAACF,KAAM,kBAAmBJ,WAAW,GACrC,CAACI,KAAM,4BAA6BJ,WAAW,GAC/C,CAACI,KAAM,uBAAwBJ,WAAW,KAGlD,CACII,KAAM,cACNW,MAAO,CAACX,KAAM,gBAAiBe,KAAM,sDACrCb,SAAU,CACN,CAACF,KAAM,sCAAkCJ,WAAW,GACpD,CAACI,KAAM,4BAA6BJ,WAAW,GAC/C,CAACI,KAAM,uBAAwBJ,WAAW,GAC1C,CAACI,KAAM,0BAA2BJ,WAAW,GAC7C,CAACI,KAAM,kBAAmBJ,WAAW,GACrC,CAACI,KAAM,sBAAuBJ,WAAW,GACzC,CAACI,KAAM,kBAAmBJ,WAAW,GACrC,CAACI,KAAM,eAAgBJ,WAAW,GAClC,CAACI,KAAM,cAAeJ,WAAW,O,wEAOjD,OAAO,yBAAKD,UAAU,aACjBe,KAAKP,MAAMmB,MAAMN,KAAI,SAACO,EAAML,GACzB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGlB,KAAMuB,EAAKvB,KAAME,SAAUqB,EAAKrB,SAAUS,MAAOY,EAAKZ,gB,GA5CvES,aCSLI,MARf,WACI,OACI,yBAAK7B,UAAU,OACX,kBAAC,EAAD,QCKQ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0ca5a5dc.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst Element = (props) => {\n    return <div className={props.isClicked ? 'btn btn-block btn-success' : 'btn btn-block btn-danger'}\n                onClick={() => props.setElementClicked(props.index)}>{props.name}</div>\n};\n\nexport default Element;\n","import React, {Component} from \"react\";\nimport Element from \"./Element\";\n\n\nclass Task extends Component {\n    constructor(props) {\n        super(props);\n        this.state = props;\n    }\n\n    setElementClicked = (index) => {\n        let elements = this.state.elements;\n        elements[index].isClicked = !elements[index].isClicked;\n        this.setState({\n            elements: elements\n        })\n    };\n\n    allElementsClicked = () => {\n        return this.state.elements.every(value => value.isClicked)\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-xl-10 offset-1 text-center\">\n                        <h1 style={{color: this.allElementsClicked() ? 'green' : 'red'}}>{this.state.name}</h1>\n                    </div>\n                </div>\n                {this.state.links == null ? null :\n                    <div className=\"row\">\n                        <div className=\"col-xl-10 offset-1 text-center alert alert-primary\">\n                            <a className=\"alert-link\" rel=\"noopener noreferrer\" target=\"_blank\"\n                               href={this.state.links.link}>{this.state.links.name}</a>\n                        </div>\n                    </div>\n                }\n                <div className=\"row\">\n                    <div className=\"btn-group-vertical col-xl-10 offset-1\">\n                        {this.state.elements.map((element, i) => {\n                            return <Element setElementClicked={this.setElementClicked}\n                                            index={i}\n                                            key={i}\n                                            name={element.name}\n                                            isClicked={element.isClicked}/>\n                        })}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Task;\n","import React, {Component} from 'react'\nimport Task from \"./Task\";\n\nclass Tasks extends Component {\n    state = {\n        tasks:\n            [\n                {\n                    name: \"Organizacja notatek\",\n                    links: null,\n                    elements: [\n                        {name: \"Docs Quick\", isClicked: false},\n                        {name: \"Telefon notatki\", isClicked: false},\n                        {name: \"Todoist Skrzynka odbiorcza\", isClicked: false},\n                        {name: \"Todoist Skrzynka odbiorcza\", isClicked: false},\n                    ]\n                },\n                {\n                    name: \"Backup Soft\",\n                    links: {name: \"Google backup\", link: \"Google https://takeout.google.com/settings/takeout\"},\n                    elements: [\n                        {name: \"Google Calendar\", isClicked: false},\n                        {name: \"Google Chrome (Bookmarks)\", isClicked: false},\n                        {name: \"Google Drive (Notes)\", isClicked: false},\n                    ]\n                },\n                {\n                    name: \"Backup Hard\",\n                    links: {name: \"Google backup\", link: \"Google https://takeout.google.com/settings/takeout\"},\n                    elements: [\n                        {name: \"OneNote ca≈Çy notatnik jako doc\", isClicked: false},\n                        {name: \"Folder Documents (Ubuntu)\", isClicked: false},\n                        {name: \"Folder Dane (Dysk D)\", isClicked: false},\n                        {name: \"Chrome Passwords Export\", isClicked: false},\n                        {name: \"Google Calendar\", isClicked: false},\n                        {name: \"Google Chrome (all)\", isClicked: false},\n                        {name: \"Google Contacts\", isClicked: false},\n                        {name: \"Google Drive\", isClicked: false},\n                        {name: \"Google Mail\", isClicked: false},\n                    ]\n                },\n            ]\n    };\n\n    render() {\n        return <div className=\"container\">\n            {this.state.tasks.map((task, i) => {\n                return <Task key={i} name={task.name} elements={task.elements} links={task.links}/>\n            })}\n        </div>\n    }\n}\n\nexport default Tasks;\n","import React from 'react';\nimport './App.css';\nimport Tasks from './components/Tasks'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Tasks/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}